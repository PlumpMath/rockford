cmdhistory=["(index)" "(j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE id < 50\\"])" "(def q-results \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE id < 50\\"]))" "q-results" "(def q-results \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE id < 50\\"]))" "(d/dataset q-results)" "(d/to-map \\n  (d/dataset q-results))" "(def q-res \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"]))" "(def q-dat \\n  (j/query (db-connection-items) [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= 1 AND dataset_id < 134\\"]))" "q-res" "q-dat" "(def q-dat \\n  (j/query (db-connection-items) [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= 1 AND dataset_id < 134\\"]))" "(def q-res \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"]))" "(m/array q-res)" "(m/matrix q-res)" "(def q-res \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"] \:as-arrays? true))" "q-res" "(def q-res \\n  (rest (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"] \:as-arrays? true)))" "q-res" "(m/array q-res)" "(def q-dat \\n  (rest (j/query (db-connection-items) [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= 1 AND dataset_id < 134\\"] \:as-arrays? true)))" "(map m/array [q-dat q-res])" "(reduce m/join (map m/array [q-dat q-res]))" "(m/matrix q-res)" "(map m/row-matrix q-res)" "(m/matrix q-res)" "(m/columns (m/matrix q-res))" "(m/diagonal (m/matrix q-res))" "(reduce \#(m/join-along 1 %1 %2) (map m/array [q-dat q-res]))" "(reduce \#(m/join-along 1 %1 %2) (map m/array [q-res q-dat]))" "(defn dat-query\\n  [sample-id]\\n  (rest \\n    (j/query \\n      (db-connection-items) \\n      [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= ?\\" sample-id] \\n      \:as-arrays? true)))" "(map dat-query [1 2])" "(map m/array (map dat-query [1 2]))" "(defn res-query\\n  [challenge-id]\\n  (rest \\n    (j/query \\n      (db-connection-items) \\n      [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= ?\\" challenge-id] \\n      \:as-arrays? true)))" "(res-query 1)" "(defn dat-query\\r\\n  [sample-id]\\r\\n  (m/array (rest \\r\\n    (j/query \\r\\n      (db-connection-items) \\r\\n      [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= ?\\" sample-id] \\r\\n      \:as-arrays? true))))" "(dat-query 1)" "(defn res-query\\r\\n  [challenge-id]\\r\\n  (m/array (rest \\r\\n    (j/query \\r\\n      (db-connection-items) \\r\\n      [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= ?\\" challenge-id] \\r\\n      \:as-arrays? true))))" "(reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4]))" "(reduce \#(m/join-along 1 %1 %2) (res-query 1) (reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4])))" "(first (dat-query 1))" "(first (res-query 1))" "(first (reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4])))" "(def first-dat (first (reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4]))))" "(def first-res (first (res-query 1)))" "(m/join-along first-dat first-res)" "(m/join-along 1 first-dat first-res)" "first-res" "first-dat" "(array? first-dat)" "(m/array? first-dat)" "(m/array? first-res)" "(reduce \#(m/join-along 1 %1 %2) (res-query 1) (map dat-query [1 2 3 4]))" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"])" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:row-fn vals)" "(map dat-query (j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:row-fn vals))" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(into [] %) \:row-fn vals \:result)" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(into [] %) \:row-fn vals)" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn flatten \:row-fn vals)" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(flatten (doall %)) \:row-fn vals)" "(map dat-query (j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(flatten (doall %)) \:row-fn vals))" "{\\\\A \\\\A \\\\B [\\\\S \\\\K \\\\Y] \\\\C \\\\C \\\\D [\\\\R \\\\K \\\\W] \\\\G \\\\G \\\\H [\\\\M \\\\Y \\\\W] \\\\K [\\\\G \\\\T] \\\\M [\\\\A \\\\C] \\\\R [\\\\A \\\\G] \\\\S [\\\\G \\\\C] \\\\T \\\\T \\\\V [\\\\M \\\\S \\\\R] \\\\W [\\\\A \\\\T] \\\\Y [\\\\C \\\\T]}" "(conj \\\\a [\\\\b])" "(conj [\\\\b] \\\\a)" "(conj [\\\\b] [\\\\a \\\\b])" "(reduce \\n  conj [\\\\b] [\\\\a \\\\b])" "(reduce conj [\\\\a \\\\b] [\\\\c \\\\d])" "(fn [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj x (map \#" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj x (map \#(get nuc-map %) (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj x (map \#(get nuc-map %) (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map \#(get nuc-map %) (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map \#(get nuc-map %) (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj x (map get-nucs x))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs x) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs x) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj [x] (map get-nucs x))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (into [] (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (into [] (conj (map get-nucs (get nuc-map x)) [x]))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (into [] (map get-nucs (get nuc-map x)) [x])))" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj [x] (map get-nucs (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (vector x (map get-nucs (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (conj (map get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(flatten (get-nucs \\\\V))" "(set (flatten (get-nucs \\\\V)))" "(get-nucs \\\\A)" "(set (get-nucs \\\\V))" "(set (flatten (get-nucs \\\\A))\\n     )" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (union (map get-nucs (get nuc-map x)) \#{x})))" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (clojure.set/union (map get-nucs (get nuc-map x)) \#{x})))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (conj (mapcat get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (conj (mapcat get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (conj (mapcat get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (clojure.set/union (mapcat get-nucs (get nuc-map x)) \#{x})))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (set (conj (mapcat get-nucs (get nuc-map x)) x))))" "(get-nucs \\\\V)" "(get-nucs \\\\A)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (set (conj (mapcat get-nucs (get nuc-map x)) x))))" "(get-nucs \\\\V)" "(get-nucs \\\\A)" "(get-nucs \\\\M)" "(defn get-nucs [x]\\n  (let [got-x (get nuc-map x)]\\n    (if (\= x got-x)\\n      \#{x}\\n      (set (conj (mapcat get-nucs got-x) x)))))" "(get-nucs \\\\M)" "(get-nucs \\\\A)" "(get-nucs \\\\V)" "(clojure.set/difference (get-nucs \\\\V) \\\\A)" "(clojure.set/difference (get-nucs \\\\V) \#{\\\\A})" "(class \\\\A)" "(class (get-nucs \\\\V)\\n       )" "(defn nuc-drilldown\\r\\n  [x]\\r\\n  (let [nuc-value (get nuc-map x)]\\r\\n    (if (\= x nuc-value)\\r\\n      \#{x}\\r\\n      (set (mapcat get-nucs nuc-value)))))" "(nuc-drilldown \\\\H)" "(get nuc-map \\\\H)" "(def my-nucs (get nuc-map \\\\H))" "(defn nuc-drilldown\\r\\n  [x]\\r\\n  (let [nuc-value (get nuc-map x)]\\r\\n    (if (\= x nuc-value)\\r\\n      \#{x}\\r\\n      (set (mapcat nuc-drilldown nuc-value)))))" "(nuc-drilldown \\\\H)" "(nuc-drilldown \\\\B)" "(nuc-drilldown \\\\D)" "(nuc-drilldown \\\\V)" "(nuc-drilldown \\\\K)" "(nuc-drilldown \\\\M)" "(nuc-drilldown \\\\R)" "(nuc-drilldown \\\\S)" "(nuc-drilldown \\\\W)" "(nuc-drilldown \\\\Y)" "(get-mixed-nucs \\\\D)" "(str \\"yes\\" \\"no\\")" "(def mymap {\:header \\"384783.3873\\" \:sequence \\"ADKJFKDJ\\"})" "(defn parse-result-header\\n  [{\:keys [header sequence]}]\\n  (let [part-dataset (->> (str/split header \#\\"\\\\.\\") (map parse-int))]\\n    {\:participant_id (first part-dataset) \:dataset_id (second part-dataset) \:sequence sequence}))" "(parse-result-header mymap)" "(range 200)" "(range 1 200)" "{\:codons (partition-all 10 (range 1 200))}" "(into {} (partition-all 10 (range 1 200)))" "(partition-all 10 (range 1 200))" "(partition-all 10 (range 1 30))" "(def mypart (partition-all 10 (range 1 30)))" "(apply (fn [x] (map \#({\:row (vec %)}) x) mypart))" "(apply (fn [x] (map \#({\:row (vec %)}) x)) mypart)" "(map \#({\:row (vec %)}) mypart)" "(map \#(hash-map \:row (vec %)) mypart)" "(map \#(hash-map \:row (vec %)) (partition-all 10 (range 1 30)))" "(map \#(hash-map \:row (vec %)) (partition-all 10 (range 1 200)))" "(first \\"1\\")" "(int (first \\"1\\"))" "(bji/parse-int \\"nope\\")" "(bji/parse-int \\"22\\")" "(file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(fasta-to-clj (file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))" "(if-let [try (fasta-to-clj (file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))]\\n  \\"yes\\"\\n  \\"no\\")" "(try \\n  (fasta-to-clj (file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))\\n  (catch Exception e (str \\"Not a valid fasta file\\")))" "(try \\n  (fasta-to-clj (file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))\\n  (catch Exception e {\:fasta-errors true}))" "(fasta-to-clj (file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))" "(file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(-> \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))" "(->> \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))" "(try \\n  (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))\\n  (catch Exception e {\:fasta-errors true}))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(try \\n  (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))\\n  (catch IOException e {\:fasta-errors true}))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(try \\n  (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)\\n  (catch IOException e {\:fasta-errors true}))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(true? (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))" "(true? (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(try \\n  (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)\\n  (catch IOException e {\:fasta-errors true}))" "(System.err \\"WTF\\")" "(System.err. \\"WTF\\")" "(with-out-str (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta))" "\:info" "(System/out (println \\"yes\\"))" "(. println (System/out) \\"yes\\")" "(.println (System/out) \\"yes\\")" "(with-out-str (.println (System/out) \\"yes\\"))" "(with-out-str (.flush (.println (System/out) \\"yes\\")))" "(.flush (with-out-str (.println (System/out) \\"yes\\")))" "(with-out-str \\n  (.println (System/out) \\"yes\\"))" "(with-out-str \\n  (.println (System/out) \\"foo\\"))" "(println)" "(println \\"foo\\")" "(def foo-file (clojure.java.io/writer \\"/Users/stu/Desktop/foo-file.txt\\"))" "(binding [*out* foo-file] (.println (System/out) \\"yes\\"))" "(defn with-system-out-str [& body]\\n  (let [out-buffer (ByteArrayOutputStream.)\\n         original-out System/out\\n         tmp-out (PrintStream. out-buffer true \\"UTF-8\\")]\\n     (try\\n       (System/setOut tmp-out)\\n       (.println (System/out) \\"foo\\")\\n       (finally\\n         (System/setOut original-out)))\\n     (.toString out-buffer \\"UTF-8\\")))" "(with-system-out-str)" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(defn with-system-out-str [file-loc]\\n  (let [out-buffer (ByteArrayOutputStream.)\\n         original-out System/out\\n         tmp-out (PrintStream. out-buffer true \\"UTF-8\\")]\\n     (try\\n       (System/setOut tmp-out)\\n       (-> file-loc file->parsed-fasta)\\n       (finally\\n         (System/setOut original-out)))\\n     (.toString out-buffer \\"UTF-8\\")))" "(with-system-out-str \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(str \\"yes\\")" "(defn with-system-err-str [file-loc]\\n  (let [err-buffer (ByteArrayOutputStream.)\\n         original-err System/err\\n         tmp-err (PrintStream. err-buffer true \\"UTF-8\\")]\\n     (try\\n       (System/setErr tmp-err)\\n       (-> file-loc file->parsed-fasta)\\n       (finally\\n         (System/setErr original-err)))\\n     (.toString err-buffer \\"UTF-8\\")))" "(with-system-err-str \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(set-loggers\! \\"FastaReader.class\\" {\:out (fn [ev] (println (\:message ev)))})" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(set-loggers\! \\"FastaReader\\" {\:out (fn [ev] (println (\:message ev)))})" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(set-loggers\! \\"org.biojava.nbio.core.sequence.io.FastaReader\\" {\:out (fn [ev] (println (\:message ev)))})" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(set-loggers\! \\"org.biojava.nbio.core.sequence.io.FastaReader\\" {\:level \:error})" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(set-logger\!)\\n(info \\"Just a plain logging message, you should see the level at the beginning\\")" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(with-out-str (-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta))" "(def mywarns (with-out-str (-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)))" "mywarns" "(first mywarns)" "{\:sequence \\"blah\\" \:header mywarns}" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> (bji/file->parsed-fasta)\\n        (map bji/fasta-to-clj)\\n        (merge {\:fasta-errors (str s)})))))" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> (file->parsed-fasta)\\n        (map fasta-to-clj)\\n        (merge {\:fasta-errors (str s)})))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> file-loc (file->parsed-fasta)\\n        (map fasta-to-clj)\\n        (merge {\:fasta-errors (str s)})))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> file-loc (file->parsed-fasta)\\n        (map fasta-to-clj)\\n        {\:fasta-errors (str s)}))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> file-loc (file->parsed-fasta)\\n        (map fasta-to-clj)\\n        (into {})\\n        (merge {\:fasta-errors (str s)})))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> file-loc (file->parsed-fasta)\\n        (map fasta-to-clj)\\n        (cons {\:fasta-errors (str s)})))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (with-out-str\\n      (->> file-loc (file->parsed-fasta)\\n        (map fasta-to-clj))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (let [done-fasta (->> file-loc (file->parsed-fasta)\\n                         (map fasta-to-clj))]\\n        (cons {\:fasta-errors (str s)} done-fasta)))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(clojure.string/split \\"Sequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\nSequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\n\\" \#\\"\\\\n\\")" "(clojure.string/split \\"\\" \#\\"\\")" "(clojure.string/split \\"\\" \#\\"\\\\n\\")" "(empty? (clojure.string/split \\"\\" \#\\"\\\\n\\"))" "(clojure.string/split \\"Sequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\nSequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\n\\" \#\\"\\\\n\\")" "(count (clojure.string/split \\"Sequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\nSequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\n\\" \#\\"\\\\n\\"))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" (file->parsed-fasta)\\n                            (map fasta-to-clj))" "(defn parse-fasta-collect-errors\\n     [file-loc]\\n     (let [s (new java.io.StringWriter)]\\n       (binding [*out* s]\\n         (let [done-fasta (->> file-loc (file->parsed-fasta)\\n                            (map fasta-to-clj))]\\n           (cons {\:fasta-errors (str s)} done-fasta)))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(count (parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))" "(first {})" "(not (first {}))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(not\= (first {}) \\"\\")" "(defn new-parse-fasta-collect-errors\\n     [file-loc]\\n     (let [s (new java.io.StringWriter)]\\n       (binding [*out* s]\\n         (let [done-fasta (->> file-loc (file->parsed-fasta)\\n                            (map fasta-to-clj))]\\n           (if-let [errors (str s)]\\n             (cons {\:fasta-errors (clojure.string/split (str s) \#\\"\\\\n\\")} done-fasta)\\n             (cons {} done-fasta))))))" "(new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(defn new-parse-fasta-collect-errors\\n     [file-loc]\\n     (let [s (new java.io.StringWriter)]\\n       (binding [*out* s]\\n         (let [done-fasta (->> file-loc (file->parsed-fasta)\\n                            (map fasta-to-clj))]\\n           (if (\= \\"\\" (str s))\\n             (cons {\:fasta-errors (clojure.string/split (str s) \#\\"\\\\n\\")} done-fasta)\\n             (cons {} done-fasta))))))" "(new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(defn new-parse-fasta-collect-errors\\n     [file-loc]\\n     (let [s (new java.io.StringWriter)]\\n       (binding [*out* s]\\n         (let [done-fasta (->> file-loc (file->parsed-fasta)\\n                            (map fasta-to-clj))]\\n           (if (not\= \\"\\" (str s))\\n             (cons {\:fasta-errors (clojure.string/split (str s) \#\\"\\\\n\\")} done-fasta)\\n             (cons {} done-fasta))))))" "(new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(merge {} {} nil)" "(first {})" "(defn check-max-fastas\\n [fasta-err-map x]\\n (if (> (count fasta-err-map) (inc x))\\n   (->> {\:fasta-errors (str \\"Please upload a fasta file containing no more than \\" x \\" reference sequence(s).\\")}\\n     (merge-with str (first fasta-err-map))\\n     (conj (rest fasta-err-map)))\\n   fasta-err-map))" "(new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 2))" "(-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 1))" "(merge-with conj {\:blah \\" \\"} {})" "(merge-with vector {\:blah \\" \\"} {})" "(merge-with \#(reduce conj %1 %2) {\:blah [\\" \\"]} {})" "(merge-with \#(reduce conj %1 %2) {\:blah [\\" \\"]} (first {}))" "(defn check-max-fastas\\n [fasta-err-map x]\\n (if (> (count fasta-err-map) (inc x))\\n   (->> {\:fasta-errors [(str \\"Please upload a fasta file containing no more than \\" x \\" sequence(s).\\")]}\\n     (merge-with \#(reduce conj %1 %2) (first fasta-err-map))\\n     (conj (rest fasta-err-map)))\\n   fasta-err-map))" "(-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 1))" "(merge {} {} (-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 1)))" "(merge {} {} (-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 1) first))"]
eclipse.preferences.version=1
