cmdhistory=["(index)" "(j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE id < 50\\"])" "(def q-results \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE id < 50\\"]))" "q-results" "(def q-results \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE id < 50\\"]))" "(d/dataset q-results)" "(d/to-map \\n  (d/dataset q-results))" "(def q-res \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"]))" "(def q-dat \\n  (j/query (db-connection-items) [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= 1 AND dataset_id < 134\\"]))" "q-res" "q-dat" "(def q-dat \\n  (j/query (db-connection-items) [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= 1 AND dataset_id < 134\\"]))" "(def q-res \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"]))" "(m/array q-res)" "(m/matrix q-res)" "(def q-res \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"] \:as-arrays? true))" "q-res" "(def q-res \\n  (rest (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"] \:as-arrays? true)))" "q-res" "(m/array q-res)" "(def q-dat \\n  (rest (j/query (db-connection-items) [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= 1 AND dataset_id < 134\\"] \:as-arrays? true)))" "(map m/array [q-dat q-res])" "(reduce m/join (map m/array [q-dat q-res]))" "(m/matrix q-res)" "(map m/row-matrix q-res)" "(m/matrix q-res)" "(m/columns (m/matrix q-res))" "(m/diagonal (m/matrix q-res))" "(reduce \#(m/join-along 1 %1 %2) (map m/array [q-dat q-res]))" "(reduce \#(m/join-along 1 %1 %2) (map m/array [q-res q-dat]))" "(defn dat-query\\n  [sample-id]\\n  (rest \\n    (j/query \\n      (db-connection-items) \\n      [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= ?\\" sample-id] \\n      \:as-arrays? true)))" "(map dat-query [1 2])" "(map m/array (map dat-query [1 2]))" "(defn res-query\\n  [challenge-id]\\n  (rest \\n    (j/query \\n      (db-connection-items) \\n      [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= ?\\" challenge-id] \\n      \:as-arrays? true)))" "(res-query 1)" "(defn dat-query\\r\\n  [sample-id]\\r\\n  (m/array (rest \\r\\n    (j/query \\r\\n      (db-connection-items) \\r\\n      [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= ?\\" sample-id] \\r\\n      \:as-arrays? true))))" "(dat-query 1)" "(defn res-query\\r\\n  [challenge-id]\\r\\n  (m/array (rest \\r\\n    (j/query \\r\\n      (db-connection-items) \\r\\n      [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= ?\\" challenge-id] \\r\\n      \:as-arrays? true))))" "(reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4]))" "(reduce \#(m/join-along 1 %1 %2) (res-query 1) (reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4])))" "(first (dat-query 1))" "(first (res-query 1))" "(first (reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4])))" "(def first-dat (first (reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4]))))" "(def first-res (first (res-query 1)))" "(m/join-along first-dat first-res)" "(m/join-along 1 first-dat first-res)" "first-res" "first-dat" "(array? first-dat)" "(m/array? first-dat)" "(m/array? first-res)" "(reduce \#(m/join-along 1 %1 %2) (res-query 1) (map dat-query [1 2 3 4]))" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"])" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:row-fn vals)" "(map dat-query (j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:row-fn vals))" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(into [] %) \:row-fn vals \:result)" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(into [] %) \:row-fn vals)" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn flatten \:row-fn vals)" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(flatten (doall %)) \:row-fn vals)" "(map dat-query (j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(flatten (doall %)) \:row-fn vals))" "{\\\\A \\\\A \\\\B [\\\\S \\\\K \\\\Y] \\\\C \\\\C \\\\D [\\\\R \\\\K \\\\W] \\\\G \\\\G \\\\H [\\\\M \\\\Y \\\\W] \\\\K [\\\\G \\\\T] \\\\M [\\\\A \\\\C] \\\\R [\\\\A \\\\G] \\\\S [\\\\G \\\\C] \\\\T \\\\T \\\\V [\\\\M \\\\S \\\\R] \\\\W [\\\\A \\\\T] \\\\Y [\\\\C \\\\T]}" "(conj \\\\a [\\\\b])" "(conj [\\\\b] \\\\a)" "(conj [\\\\b] [\\\\a \\\\b])" "(reduce \\n  conj [\\\\b] [\\\\a \\\\b])" "(reduce conj [\\\\a \\\\b] [\\\\c \\\\d])" "(fn [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj x (map \#" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj x (map \#(get nuc-map %) (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj x (map \#(get nuc-map %) (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map \#(get nuc-map %) (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map \#(get nuc-map %) (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj x (map get-nucs x))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs x) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs x) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj [x] (map get-nucs x))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (into [] (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (into [] (conj (map get-nucs (get nuc-map x)) [x]))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (into [] (map get-nucs (get nuc-map x)) [x])))" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj [x] (map get-nucs (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (vector x (map get-nucs (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (conj (map get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(flatten (get-nucs \\\\V))" "(set (flatten (get-nucs \\\\V)))" "(get-nucs \\\\A)" "(set (get-nucs \\\\V))" "(set (flatten (get-nucs \\\\A))\\n     )" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (union (map get-nucs (get nuc-map x)) \#{x})))" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (clojure.set/union (map get-nucs (get nuc-map x)) \#{x})))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (conj (mapcat get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (conj (mapcat get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (conj (mapcat get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (clojure.set/union (mapcat get-nucs (get nuc-map x)) \#{x})))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (set (conj (mapcat get-nucs (get nuc-map x)) x))))" "(get-nucs \\\\V)" "(get-nucs \\\\A)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (set (conj (mapcat get-nucs (get nuc-map x)) x))))" "(get-nucs \\\\V)" "(get-nucs \\\\A)" "(get-nucs \\\\M)" "(defn get-nucs [x]\\n  (let [got-x (get nuc-map x)]\\n    (if (\= x got-x)\\n      \#{x}\\n      (set (conj (mapcat get-nucs got-x) x)))))" "(get-nucs \\\\M)" "(get-nucs \\\\A)" "(get-nucs \\\\V)" "(clojure.set/difference (get-nucs \\\\V) \\\\A)" "(clojure.set/difference (get-nucs \\\\V) \#{\\\\A})" "(class \\\\A)" "(class (get-nucs \\\\V)\\n       )" "(defn nuc-drilldown\\r\\n  [x]\\r\\n  (let [nuc-value (get nuc-map x)]\\r\\n    (if (\= x nuc-value)\\r\\n      \#{x}\\r\\n      (set (mapcat get-nucs nuc-value)))))" "(nuc-drilldown \\\\H)" "(get nuc-map \\\\H)" "(def my-nucs (get nuc-map \\\\H))" "(defn nuc-drilldown\\r\\n  [x]\\r\\n  (let [nuc-value (get nuc-map x)]\\r\\n    (if (\= x nuc-value)\\r\\n      \#{x}\\r\\n      (set (mapcat nuc-drilldown nuc-value)))))" "(nuc-drilldown \\\\H)" "(nuc-drilldown \\\\B)" "(nuc-drilldown \\\\D)" "(nuc-drilldown \\\\V)" "(nuc-drilldown \\\\K)" "(nuc-drilldown \\\\M)" "(nuc-drilldown \\\\R)" "(nuc-drilldown \\\\S)" "(nuc-drilldown \\\\W)" "(nuc-drilldown \\\\Y)" "(get-mixed-nucs \\\\D)"]
eclipse.preferences.version=1
