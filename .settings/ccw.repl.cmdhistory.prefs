cmdhistory=["(index)" "(j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE id < 50\\"])" "(def q-results \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE id < 50\\"]))" "q-results" "(def q-results \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE id < 50\\"]))" "(d/dataset q-results)" "(d/to-map \\n  (d/dataset q-results))" "(def q-res \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"]))" "(def q-dat \\n  (j/query (db-connection-items) [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= 1 AND dataset_id < 134\\"]))" "q-res" "q-dat" "(def q-dat \\n  (j/query (db-connection-items) [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= 1 AND dataset_id < 134\\"]))" "(def q-res \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"]))" "(m/array q-res)" "(m/matrix q-res)" "(def q-res \\n  (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"] \:as-arrays? true))" "q-res" "(def q-res \\n  (rest (j/query (db-connection-items) [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= 1 LIMIT 5\\"] \:as-arrays? true)))" "q-res" "(m/array q-res)" "(def q-dat \\n  (rest (j/query (db-connection-items) [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= 1 AND dataset_id < 134\\"] \:as-arrays? true)))" "(map m/array [q-dat q-res])" "(reduce m/join (map m/array [q-dat q-res]))" "(m/matrix q-res)" "(map m/row-matrix q-res)" "(m/matrix q-res)" "(m/columns (m/matrix q-res))" "(m/diagonal (m/matrix q-res))" "(reduce \#(m/join-along 1 %1 %2) (map m/array [q-dat q-res]))" "(reduce \#(m/join-along 1 %1 %2) (map m/array [q-res q-dat]))" "(defn dat-query\\n  [sample-id]\\n  (rest \\n    (j/query \\n      (db-connection-items) \\n      [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= ?\\" sample-id] \\n      \:as-arrays? true)))" "(map dat-query [1 2])" "(map m/array (map dat-query [1 2]))" "(defn res-query\\n  [challenge-id]\\n  (rest \\n    (j/query \\n      (db-connection-items) \\n      [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= ?\\" challenge-id] \\n      \:as-arrays? true)))" "(res-query 1)" "(defn dat-query\\r\\n  [sample-id]\\r\\n  (m/array (rest \\r\\n    (j/query \\r\\n      (db-connection-items) \\r\\n      [\\"SELECT dataset_id, quantitative_value, qualitative_value, ct_value FROM result_molecular_standard WHERE challenge_sample_id \= ?\\" sample-id] \\r\\n      \:as-arrays? true))))" "(dat-query 1)" "(defn res-query\\r\\n  [challenge-id]\\r\\n  (m/array (rest \\r\\n    (j/query \\r\\n      (db-connection-items) \\r\\n      [\\"SELECT id, challenge_id, programme_id, participant_id, quantitative_units FROM dataset WHERE challenge_id \= ?\\" challenge-id] \\r\\n      \:as-arrays? true))))" "(reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4]))" "(reduce \#(m/join-along 1 %1 %2) (res-query 1) (reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4])))" "(first (dat-query 1))" "(first (res-query 1))" "(first (reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4])))" "(def first-dat (first (reduce \#(m/join-along 1 %1 %2) (map dat-query [1 2 3 4]))))" "(def first-res (first (res-query 1)))" "(m/join-along first-dat first-res)" "(m/join-along 1 first-dat first-res)" "first-res" "first-dat" "(array? first-dat)" "(m/array? first-dat)" "(m/array? first-res)" "(reduce \#(m/join-along 1 %1 %2) (res-query 1) (map dat-query [1 2 3 4]))" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"])" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:row-fn vals)" "(map dat-query (j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:row-fn vals))" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(into [] %) \:row-fn vals \:result)" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(into [] %) \:row-fn vals)" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn flatten \:row-fn vals)" "(j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(flatten (doall %)) \:row-fn vals)" "(map dat-query (j/query \\r\\n      (db-connection-items) [\\"SELECT id FROM challenge_sample LIMIT 5\\"] \:result-set-fn \#(flatten (doall %)) \:row-fn vals))" "{\\\\A \\\\A \\\\B [\\\\S \\\\K \\\\Y] \\\\C \\\\C \\\\D [\\\\R \\\\K \\\\W] \\\\G \\\\G \\\\H [\\\\M \\\\Y \\\\W] \\\\K [\\\\G \\\\T] \\\\M [\\\\A \\\\C] \\\\R [\\\\A \\\\G] \\\\S [\\\\G \\\\C] \\\\T \\\\T \\\\V [\\\\M \\\\S \\\\R] \\\\W [\\\\A \\\\T] \\\\Y [\\\\C \\\\T]}" "(conj \\\\a [\\\\b])" "(conj [\\\\b] \\\\a)" "(conj [\\\\b] [\\\\a \\\\b])" "(reduce \\n  conj [\\\\b] [\\\\a \\\\b])" "(reduce conj [\\\\a \\\\b] [\\\\c \\\\d])" "(fn [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj x (map \#" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj x (map \#(get nuc-map %) (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj x (map \#(get nuc-map %) (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map \#(get nuc-map %) (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map \#(get nuc-map %) (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj x (map get-nucs x))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs x) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs x) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj [x] (map get-nucs x))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (into [] (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (into [] (conj (map get-nucs (get nuc-map x)) [x]))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (into [] (map get-nucs (get nuc-map x)) [x])))" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj [x] (map get-nucs (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (vector x (map get-nucs (get nuc-map x)))))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (reduce conj (map get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (conj (map get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(flatten (get-nucs \\\\V))" "(set (flatten (get-nucs \\\\V)))" "(get-nucs \\\\A)" "(set (get-nucs \\\\V))" "(set (flatten (get-nucs \\\\A))\\n     )" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (union (map get-nucs (get nuc-map x)) \#{x})))" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (clojure.set/union (map get-nucs (get nuc-map x)) \#{x})))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (conj (mapcat get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    x\\n    (conj (mapcat get-nucs (get nuc-map x)) [x])))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (conj (mapcat get-nucs (get nuc-map x)) x)))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (clojure.set/union (mapcat get-nucs (get nuc-map x)) \#{x})))" "(get-nucs \\\\V)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    [x]\\n    (set (conj (mapcat get-nucs (get nuc-map x)) x))))" "(get-nucs \\\\V)" "(get-nucs \\\\A)" "(defn get-nucs [x]\\n  (if (\= x (get nuc-map x))\\n    \#{x}\\n    (set (conj (mapcat get-nucs (get nuc-map x)) x))))" "(get-nucs \\\\V)" "(get-nucs \\\\A)" "(get-nucs \\\\M)" "(defn get-nucs [x]\\n  (let [got-x (get nuc-map x)]\\n    (if (\= x got-x)\\n      \#{x}\\n      (set (conj (mapcat get-nucs got-x) x)))))" "(get-nucs \\\\M)" "(get-nucs \\\\A)" "(get-nucs \\\\V)" "(clojure.set/difference (get-nucs \\\\V) \\\\A)" "(clojure.set/difference (get-nucs \\\\V) \#{\\\\A})" "(class \\\\A)" "(class (get-nucs \\\\V)\\n       )" "(defn nuc-drilldown\\r\\n  [x]\\r\\n  (let [nuc-value (get nuc-map x)]\\r\\n    (if (\= x nuc-value)\\r\\n      \#{x}\\r\\n      (set (mapcat get-nucs nuc-value)))))" "(nuc-drilldown \\\\H)" "(get nuc-map \\\\H)" "(def my-nucs (get nuc-map \\\\H))" "(defn nuc-drilldown\\r\\n  [x]\\r\\n  (let [nuc-value (get nuc-map x)]\\r\\n    (if (\= x nuc-value)\\r\\n      \#{x}\\r\\n      (set (mapcat nuc-drilldown nuc-value)))))" "(nuc-drilldown \\\\H)" "(nuc-drilldown \\\\B)" "(nuc-drilldown \\\\D)" "(nuc-drilldown \\\\V)" "(nuc-drilldown \\\\K)" "(nuc-drilldown \\\\M)" "(nuc-drilldown \\\\R)" "(nuc-drilldown \\\\S)" "(nuc-drilldown \\\\W)" "(nuc-drilldown \\\\Y)" "(get-mixed-nucs \\\\D)" "(str \\"yes\\" \\"no\\")" "(def mymap {\:header \\"384783.3873\\" \:sequence \\"ADKJFKDJ\\"})" "(defn parse-result-header\\n  [{\:keys [header sequence]}]\\n  (let [part-dataset (->> (str/split header \#\\"\\\\.\\") (map parse-int))]\\n    {\:participant_id (first part-dataset) \:dataset_id (second part-dataset) \:sequence sequence}))" "(parse-result-header mymap)" "(range 200)" "(range 1 200)" "{\:codons (partition-all 10 (range 1 200))}" "(into {} (partition-all 10 (range 1 200)))" "(partition-all 10 (range 1 200))" "(partition-all 10 (range 1 30))" "(def mypart (partition-all 10 (range 1 30)))" "(apply (fn [x] (map \#({\:row (vec %)}) x) mypart))" "(apply (fn [x] (map \#({\:row (vec %)}) x)) mypart)" "(map \#({\:row (vec %)}) mypart)" "(map \#(hash-map \:row (vec %)) mypart)" "(map \#(hash-map \:row (vec %)) (partition-all 10 (range 1 30)))" "(map \#(hash-map \:row (vec %)) (partition-all 10 (range 1 200)))" "(first \\"1\\")" "(int (first \\"1\\"))" "(bji/parse-int \\"nope\\")" "(bji/parse-int \\"22\\")" "(file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(fasta-to-clj (file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))" "(if-let [try (fasta-to-clj (file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))]\\n  \\"yes\\"\\n  \\"no\\")" "(try \\n  (fasta-to-clj (file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))\\n  (catch Exception e (str \\"Not a valid fasta file\\")))" "(try \\n  (fasta-to-clj (file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))\\n  (catch Exception e {\:fasta-errors true}))" "(fasta-to-clj (file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))" "(file->parsed-fasta \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(-> \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))" "(->> \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))" "(try \\n  (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))\\n  (catch Exception e {\:fasta-errors true}))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(try \\n  (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))\\n  (catch IOException e {\:fasta-errors true}))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(try \\n  (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)\\n  (catch IOException e {\:fasta-errors true}))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(true? (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta (map fasta-to-clj))" "(true? (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(try \\n  (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)\\n  (catch IOException e {\:fasta-errors true}))" "(System.err \\"WTF\\")" "(System.err. \\"WTF\\")" "(with-out-str (->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta))" "\:info" "(System/out (println \\"yes\\"))" "(. println (System/out) \\"yes\\")" "(.println (System/out) \\"yes\\")" "(with-out-str (.println (System/out) \\"yes\\"))" "(with-out-str (.flush (.println (System/out) \\"yes\\")))" "(.flush (with-out-str (.println (System/out) \\"yes\\")))" "(with-out-str \\n  (.println (System/out) \\"yes\\"))" "(with-out-str \\n  (.println (System/out) \\"foo\\"))" "(println)" "(println \\"foo\\")" "(def foo-file (clojure.java.io/writer \\"/Users/stu/Desktop/foo-file.txt\\"))" "(binding [*out* foo-file] (.println (System/out) \\"yes\\"))" "(defn with-system-out-str [& body]\\n  (let [out-buffer (ByteArrayOutputStream.)\\n         original-out System/out\\n         tmp-out (PrintStream. out-buffer true \\"UTF-8\\")]\\n     (try\\n       (System/setOut tmp-out)\\n       (.println (System/out) \\"foo\\")\\n       (finally\\n         (System/setOut original-out)))\\n     (.toString out-buffer \\"UTF-8\\")))" "(with-system-out-str)" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(defn with-system-out-str [file-loc]\\n  (let [out-buffer (ByteArrayOutputStream.)\\n         original-out System/out\\n         tmp-out (PrintStream. out-buffer true \\"UTF-8\\")]\\n     (try\\n       (System/setOut tmp-out)\\n       (-> file-loc file->parsed-fasta)\\n       (finally\\n         (System/setOut original-out)))\\n     (.toString out-buffer \\"UTF-8\\")))" "(with-system-out-str \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(str \\"yes\\")" "(defn with-system-err-str [file-loc]\\n  (let [err-buffer (ByteArrayOutputStream.)\\n         original-err System/err\\n         tmp-err (PrintStream. err-buffer true \\"UTF-8\\")]\\n     (try\\n       (System/setErr tmp-err)\\n       (-> file-loc file->parsed-fasta)\\n       (finally\\n         (System/setErr original-err)))\\n     (.toString err-buffer \\"UTF-8\\")))" "(with-system-err-str \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(set-loggers\! \\"FastaReader.class\\" {\:out (fn [ev] (println (\:message ev)))})" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(set-loggers\! \\"FastaReader\\" {\:out (fn [ev] (println (\:message ev)))})" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(set-loggers\! \\"org.biojava.nbio.core.sequence.io.FastaReader\\" {\:out (fn [ev] (println (\:message ev)))})" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(set-loggers\! \\"org.biojava.nbio.core.sequence.io.FastaReader\\" {\:level \:error})" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(set-logger\!)\\n(info \\"Just a plain logging message, you should see the level at the beginning\\")" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(with-out-str (-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta))" "(def mywarns (with-out-str (-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)))" "mywarns" "(first mywarns)" "{\:sequence \\"blah\\" \:header mywarns}" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> (bji/file->parsed-fasta)\\n        (map bji/fasta-to-clj)\\n        (merge {\:fasta-errors (str s)})))))" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> (file->parsed-fasta)\\n        (map fasta-to-clj)\\n        (merge {\:fasta-errors (str s)})))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> file-loc (file->parsed-fasta)\\n        (map fasta-to-clj)\\n        (merge {\:fasta-errors (str s)})))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> file-loc (file->parsed-fasta)\\n        (map fasta-to-clj)\\n        {\:fasta-errors (str s)}))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> file-loc (file->parsed-fasta)\\n        (map fasta-to-clj)\\n        (into {})\\n        (merge {\:fasta-errors (str s)})))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(-> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" file->parsed-fasta)" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (->> file-loc (file->parsed-fasta)\\n        (map fasta-to-clj)\\n        (cons {\:fasta-errors (str s)})))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (with-out-str\\n      (->> file-loc (file->parsed-fasta)\\n        (map fasta-to-clj))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(defn parse-fasta-collect-errors\\n  [file-loc]\\n  (let [s (new java.io.StringWriter)]\\n    (binding [*out* s]\\n      (let [done-fasta (->> file-loc (file->parsed-fasta)\\n                         (map fasta-to-clj))]\\n        (cons {\:fasta-errors (str s)} done-fasta)))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(clojure.string/split \\"Sequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\nSequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\n\\" \#\\"\\\\n\\")" "(clojure.string/split \\"\\" \#\\"\\")" "(clojure.string/split \\"\\" \#\\"\\\\n\\")" "(empty? (clojure.string/split \\"\\" \#\\"\\\\n\\"))" "(clojure.string/split \\"Sequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\nSequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\n\\" \#\\"\\\\n\\")" "(count (clojure.string/split \\"Sequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\nSequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\\\n\\" \#\\"\\\\n\\"))" "(->> \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" (file->parsed-fasta)\\n                            (map fasta-to-clj))" "(defn parse-fasta-collect-errors\\n     [file-loc]\\n     (let [s (new java.io.StringWriter)]\\n       (binding [*out* s]\\n         (let [done-fasta (->> file-loc (file->parsed-fasta)\\n                            (map fasta-to-clj))]\\n           (cons {\:fasta-errors (str s)} done-fasta)))))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(count (parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\"))" "(first {})" "(not (first {}))" "(parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(not\= (first {}) \\"\\")" "(defn new-parse-fasta-collect-errors\\n     [file-loc]\\n     (let [s (new java.io.StringWriter)]\\n       (binding [*out* s]\\n         (let [done-fasta (->> file-loc (file->parsed-fasta)\\n                            (map fasta-to-clj))]\\n           (if-let [errors (str s)]\\n             (cons {\:fasta-errors (clojure.string/split (str s) \#\\"\\\\n\\")} done-fasta)\\n             (cons {} done-fasta))))))" "(new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(defn new-parse-fasta-collect-errors\\n     [file-loc]\\n     (let [s (new java.io.StringWriter)]\\n       (binding [*out* s]\\n         (let [done-fasta (->> file-loc (file->parsed-fasta)\\n                            (map fasta-to-clj))]\\n           (if (\= \\"\\" (str s))\\n             (cons {\:fasta-errors (clojure.string/split (str s) \#\\"\\\\n\\")} done-fasta)\\n             (cons {} done-fasta))))))" "(new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(defn new-parse-fasta-collect-errors\\n     [file-loc]\\n     (let [s (new java.io.StringWriter)]\\n       (binding [*out* s]\\n         (let [done-fasta (->> file-loc (file->parsed-fasta)\\n                            (map fasta-to-clj))]\\n           (if (not\= \\"\\" (str s))\\n             (cons {\:fasta-errors (clojure.string/split (str s) \#\\"\\\\n\\")} done-fasta)\\n             (cons {} done-fasta))))))" "(new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(merge {} {} nil)" "(first {})" "(defn check-max-fastas\\n [fasta-err-map x]\\n (if (> (count fasta-err-map) (inc x))\\n   (->> {\:fasta-errors (str \\"Please upload a fasta file containing no more than \\" x \\" reference sequence(s).\\")}\\n     (merge-with str (first fasta-err-map))\\n     (conj (rest fasta-err-map)))\\n   fasta-err-map))" "(new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\")" "(-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 2))" "(-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 1))" "(merge-with conj {\:blah \\" \\"} {})" "(merge-with vector {\:blah \\" \\"} {})" "(merge-with \#(reduce conj %1 %2) {\:blah [\\" \\"]} {})" "(merge-with \#(reduce conj %1 %2) {\:blah [\\" \\"]} (first {}))" "(defn check-max-fastas\\n [fasta-err-map x]\\n (if (> (count fasta-err-map) (inc x))\\n   (->> {\:fasta-errors [(str \\"Please upload a fasta file containing no more than \\" x \\" sequence(s).\\")]}\\n     (merge-with \#(reduce conj %1 %2) (first fasta-err-map))\\n     (conj (rest fasta-err-map)))\\n   fasta-err-map))" "(-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 1))" "(merge {} {} (-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 1)))" "(merge {} {} (-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 1) first))" "(require '(rockford.handler \:as hnd))" "(require '(rockford.handler [\:as hnd]))" "(require '[rockford.handler \:as hnd])" "(merge {} {} (-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 1) first))" "(-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\") (check-max-fastas 1))" "(-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\") (check-max-fastas 1))" "(defn check-max-fastas\\n [fasta-err-map x]\\n (if (> (count fasta-err-map) (inc x))\\n   (-> {\:fasta-errors [(str \\"Please upload a fasta file containing no more than \\" x \\" sequence(s).\\")]}\\n     (merge-with \#(reduce conj %1 %2) (first fasta-err-map))\\n     (cons (rest fasta-err-map)))\\n   fasta-err-map))" "(-> (new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\") (check-max-fastas 1))" "(def initial-errors {\:fasta-errors\\n  [\\"Sequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\"\\n   \\"Sequence with header 'Wildtype (Kinase UL97)' has unrecognised compounds (Cannot find compound for\: Z), it will be ignored\\"]})" "(def later-errors {\:fasta-errors [(str \\"Please upload a fasta file containing no more than \\" x \\" sequence(s).\\")]})" "(def later-errors {\:fasta-errors [(str \\"Please upload a fasta file containing no more than blah sequence(s).\\")]})" "(merge-with \#(reduce conj %1 %2) initial-errors later-errors)" "(merge-with \#(reduce conj %1 %2) later-errors inital-errors)" "(merge-with \#(reduce conj %1 %2) later-errors initial-errors)" "(new-parse-fasta-collect-errors \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\")" "(db/do-local-insert\! reference_sequence {\:name \\"Reference name\\" \:sequence \\"ACATACTACT\\" \:start_codon 301 \:end_codon 450 \:complete 0})" "(db/do-local-insert\! \:reference_sequence {\:name \\"Reference name\\" \:sequence \\"ACATACTACT\\" \:start_codon 301 \:end_codon 450 \:complete 0})" "(repeat \\"A\\" 300)" "(repeat 300 \\"A\\")" "(->> \\"A\\" (repeat 300) (apply str))" "(db/do-local-insert\! \:reference_sequence {\:name (->> \\"A\\" (repeat 300) (apply str)) \:sequence \\"ACATACTACT\\" \:start_codon 301 \:end_codon 450 \:complete 0})" "(let [junk (db/do-local-insert\! \:reference_sequence {\:name (->> \\"A\\" (repeat 300) (apply str)) \:sequence \\"ACATACTACT\\" \:start_codon 301 \:end_codon 450 \:complete 0})]\\n  (str junk))" "(let [junk (db/do-local-insert\! \:reference_sequence {\:name (->> \\"A\\" (repeat 300) (apply str)) \:sequence \\"ACATACTACT\\" \:start_codon 301 \:end_codon 450 \:complete 0})]\\n  junk)" "(let [junk (db/do-local-insert\! \:reference_sequence {\:name (->> \\"A\\" (repeat 300) (apply str)) \:sequence \\"ACATACTACT\\" \:start_codon 301 \:end_codon 450 \:complete 0})]\\n  (class junk))" "(try\\n  (db/do-local-insert\! \:reference_sequence {\:name (->> \\"A\\" (repeat 300) (apply str)) \:sequence \\"ACATACTACT\\" \:start_codon 301 \:end_codon 450 \:complete 0})\\n  (catch Exception e (str \\"caught exception\: \\" (.getMessage e))))" "(let [junk (try\\n             (db/do-local-insert\! \:reference_sequence {\:name (->> \\"A\\" (repeat 200) (apply str)) \:sequence \\"ACATACTACT\\" \:start_codon 301 \:end_codon 450 \:complete 0})\\n             (catch Exception e (str (.getMessage e))))]\\n  junk)" "(let [junk (try\\n             (db/do-local-insert\! \:reference_sequence {\:name (->> \\"A\\" (repeat 200) (apply str)) \:sequence \\"ACATACTACT\\" \:start_codon 301 \:end_codon 450 \:complete 0})\\n             (catch Exception e (str (.getMessage e))))]\\n  [junk])" "(let [junk (try\\n             (db/do-local-insert\! \:reference_sequence {\:name (->> \\"A\\" (repeat 300) (apply str)) \:sequence \\"ACATACTACT\\" \:start_codon 301 \:end_codon 450 \:complete 0})\\n             (catch Exception e (str (.getMessage e))))]\\n  [junk])" "(true? {})" "(range 5 10)" "(take (* 6 3) \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTCACGGTCTGGATG\\r\\nTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGC\\r\\nACGGGCGT\\")" "(reduce str (take (* 6 3) \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTCACGGTCTGGATG\\r\\nTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGC\\r\\nACGGGCGT\\"))" "(count (reduce str (take (* 6 3) \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTCACGGTCTGGATG\\r\\nTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGC\\r\\nACGGGCGT\\")))" "(def myseq (reduce str (take (* 6 3) \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTCACGGTCTGGATG\\r\\nTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGC\\r\\nACGGGCGT\\")))" "(partition 3 myseq)" "(map (comp apply str) (partition 3 myseq))" "(map \#(apply str %) (partition 3 myseq))" "(repeat 6 5)" "(map \#(hash-map \:sequence_id % \:codon_id %2 \:sequence %3 \:is_drm %4) (repeat 6 5) (range 5 11) (map \#(apply str %) (partition 3 myseq)) (repeat 0))" "(count mysequence)" "(count myseq)" "(merge-with \#(reduce conj %1 %2) {} {})" "(defn blah [{\:keys [a b seq]}]\\n  (if seq\\n    \\"worked\\"\\n    \\"didn't work\\"))" "(blah {\:a \\"yes\\" \:b \\"no\\" \:seq \\"maybe\\"})" "(blah {\:a \\"yes\\" \:b \\"no\\"})" "(blah {\:a \\"yes\\" \:b \\"no\\" \:seq nil})" "(defn blah [{\:keys [a b seq]}]\\n  (if (not seq)\\n    \\"worked\\"\\n    \\"didn't work\\"))" "(blah {\:a \\"yes\\" \:b \\"no\\" \:seq nil})" "(select-keys {\:a \\"yes\\" \:b \\"no\\" \:seq nil} [\:a \:b])" "(count \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTCACGGTCTGGATG\\r\\nTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGC\\r\\nACGGGCGTGCACCGCGGTCTGCTCACGGCCACGGGCTGCTGTCTGCTGCACAACGTCACG\\r\\nGTACATCGACGTTTCCACACAGACATGTTTCATCACGACCAGTGGAAGCTGGCGTGCATC\\r\\nGACAGCTACCGACGTGCCTTTTGCACGTTGGCCGACGCTATCAAATTTCTCAATCACCAG\\r\\nTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCAC\\r\\nAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCG\\r\\nGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGTACGGCGCGCCGCATCCCC\\r\\nAACTGCTCGCACCGTCTGCGCGAATGTTACCACCCTGCTTTCCGACCCATGCCGCTGCAG\\r\\nAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGC\\r\\nATGTCGGAGCTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGAC\\r\\nCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGC\\r\\nGCGGCCTGCCGCGCGTTGGAGAACGGTAAGCTCACGCACTGCTCCGACGCCTGTCTGCTC\\r\\nATT\\")" "(/ 796 3)" "(int (/ 796 3))" "(not\= 20 (* 20 3))" "(true? {\:fasta-errors [\\"kdjfklfjd\\"]})" "(true? (\:fasta-errors {\:fasta-errors [\\"kdjfklfjd\\"]}))" "(if-let [errors {\:fasta-errors [\\"kdjfklfjd\\"]}]\\n  (str (\:fasta-errors errors))\\n  \\"Nope\\")" "(if-let [errors (merge {} {} {} {})]\\n  \\"yes\\"\\n  \\"no\\")" "(if-let [errors {}]\\n  \\"yes\\"\\n  \\"no\\")" "(merge nil nil nil {})" "(if-let [errors (merge nil nil nil {})]\\n  \\"yes\\"\\n  \\"no\\")" "(if-let [errors (merge nil nil nil nil)]\\n  \\"yes\\"\\n  \\"no\\")" "(if-let [errors (merge-with \#(reduce conj %1 %2) nil nil nil nil)]\\n  \\"yes\\"\\n  \\"no\\")" "(count \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTCACGGTCTGGATGTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGCACGGGCGTGCACCGCGGTCTGCTCACGGCCACGGGCTGCTGTCTGCTGCACAACGTCACGGTACATCGACGTTTCCACACAGACATGTTTCATCACGACCAGTGGAAGCTGGCGTGCATCGACAGCTACCGACGTGCCTTTTGCACGTTGGCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGTACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCACCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGCATGTCGGAGCTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTTGGAGAACGGTAAGCTCACGCACTGCTCCGACGCCTGTCTGCTCATT\\")" "(db/get-reference-sequence 5)" "(defn get-reference-sequence\\n  [sequence-id]\\n  (do-local-query [\\"SELECT * FROM reference_sequence where id \= ?\\"]))" "(defn get-reference-sequence\\n  [sequence-id]\\n  (db/do-local-query [\\"SELECT * FROM reference_sequence where id \= ?\\"]))" "(get-reference-sequence 5)" "(defn get-reference-sequence\\n  [sequence-id]\\n  (db/do-local-query [\\"SELECT * FROM reference_sequence where id \= ?\\" sequence-id]))" "(get-reference-sequence 5)" "(map \#(hash-map \:sequence_id % \:codon_id %2 \:sequence %3 \:is_drm %4) (repeat 6 5) (range 5 11) (map \#(apply str %) (partition 3 myseq)) (repeat 0))" "(def myrefseq (first (get-reference-sequence 5)))" "(defn do-local-insert-multi\!\\n  [table maps]\\n  (j/with-db-connection [conn {\:datasource local-datasource}]\\n    (j/insert-multi\! conn table maps)))" "(def myrefseq (first (get-reference-sequence 5)))" "myrefseq" "(insert-reference-drms\! 5 (\:sequence myrefseq) 350 610)" "(defn insert-reference-drms\!\\n  [sequence-id sequence start-codon end-codon]\\n  (let [drm-maps (map \#(hash-map \:sequence_id % \:codon_id %2 \:sequence %3 \:is_drm %4)\\n                      (repeat (- (inc end-codon) start-codon) sequence-id)\\n                      (range start-codon (inc end-codon))\\n                      (map \#(apply str %) (partition 3 sequence))\\n                      (repeat 0))]\\n    (do-local-insert-multi\! \:reference_sequence drm-maps)))" "(insert-reference-drms\! 5 (\:sequence myrefseq) 350 610)" "(defn insert-reference-drms\!\\n  [sequence-id sequence start-codon end-codon]\\n  (let [drm-maps (map \#(hash-map \:sequence_id % \:codon_id %2 \:sequence %3 \:is_drm %4)\\n                      (repeat (- (inc end-codon) start-codon) sequence-id)\\n                      (range start-codon (inc end-codon))\\n                      (map \#(apply str %) (partition 3 sequence))\\n                      (repeat 0))]\\n    (do-local-insert-multi\! \:reference_drms drm-maps)))" "(insert-reference-drms\! 5 (\:sequence myrefseq) 350 610)" "(defn insert-reference-drms\!\\n  [sequence-id sequence start-codon end-codon]\\n  (let [drm-maps (map \#(hash-map \:reference_id % \:codon_id %2 \:sequence %3 \:is_drm %4)\\n                      (repeat (- (inc end-codon) start-codon) sequence-id)\\n                      (range start-codon (inc end-codon))\\n                      (map \#(apply str %) (partition 3 sequence))\\n                      (repeat 0))]\\n    (do-local-insert-multi\! \:reference_drms drm-maps)))" "(insert-reference-drms\! 5 (\:sequence myrefseq) 350 610)" "myrefseq" "(-> myrefseq \:start_codon)" "(do-local-insert\! \:reference_sequence {\:name (\:header myrefseq) \:sequence (\:sequence myrefseq) \:start_codon 350 \:end_codon 610})" "(def myreturn (do-local-insert\! \:reference_sequence {\:name (\:header myrefseq) \:sequence (\:sequence myrefseq) \:start_codon 350 \:end_codon 610}))" "(-> myreturn first \:generated_key)" "(bji/fasta-upload-parser \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" \:fasta-errors)" "(as->  (local/id-gets-reference \\"17\\") ref (- (inc (\:end-codon ref)) (\:start-codon ref)))" "(as->  (local/id-gets-reference \\"17\\") ref (- (inc (\:end_codon ref)) (\:start_codon ref)))" "(as->  (local/id-gets-reference \\"17\\") ref)" "(local/id-gets-reference 17)" "(as->  (local/id-gets-reference {\:reference-id \\"17\\"}) ref (- (inc (\:end_codon ref)) (\:start_codon ref)))" "(local/id-gets-reference {\:reference-id \\"17\\"})" "(as-> (local/id-gets-reference {\:reference-id \\"17\\"}) ref (- (inc (\:end_codon ref)) (\:start_codon ref)))" "(local/id-gets-reference {\:reference-id \\"17\\"})" "(def myref (local/id-gets-reference {\:reference-id \\"17\\"}))" "(- (inc (\:end_codon myref)) (\:start_codon myref))" "(inc (\:end_codon myref))" "(\:end_codon myref)" "(as-> (first (local/id-gets-reference {\:reference-id \\"17\\"})) ref (- (inc (\:end_codon ref)) (\:start_codon ref)))" "(as-> (local/id-gets-reference {\:reference-id \\"17\\"}) ref (- (inc (\:end_codon ref)) (\:start_codon ref)))" "(defn id-gets-reference\\n  [{\:keys [reference-id]}]\\n  (-> (local/do-local-query [\\"SELECT * FROM reference where id \= ? AND complete \= 1\\" reference-id])\\n    (utils/rename-ids \:reference_id)\\n    first))" "(defn id-gets-reference\\n  [{\:keys [reference-id]}]\\n  (-> (local/do-local-query [\\"SELECT * FROM reference where id \= ? AND complete \= 1\\" reference-id])\\n    (rockford.db.utilities/rename-ids \:reference_id)\\n    first))" "(as-> (id-gets-reference {\:reference-id \\"17\\"}) ref (- (inc (\:end_codon ref)) (\:start_codon ref)))" "(bji/fasta-upload-parser \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\" \:fasta-errors)" "(v/check-max-fastas {\:file \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\"} \:file \:file-errors)" "(v/check-max-fastas {\:file {\:tempfile \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\"}} \:file \:file-errors)" "(def myerrmap (v/check-max-fastas {\:file {\:tempfile \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\"}} \:file \:file-errors))" "(map \#(count (\:sequence %)) (rest myerrmap))" "(reduce \#(if (not\= (count (\:sequence %2)) 261 * 3) \\n           (str % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count \:sequence %2) \\" bases, should be \\" 261 * 3 \\").\\")\\n           %1) \\"\\" (rest myerrmap))" "(reduce \#(if (not\= (count (\:sequence %2)) 261 * 3) \\n           (str % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" 261 * 3 \\").\\")\\n           %1) \\"\\" (rest myerrmap))" "(reduce \#(if (not\= (count (\:sequence %2)) 261 * 3) \\n           (str % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 261) \\").\\\\n\\")\\n           %1) \\"\\" (rest myerrmap))" "(reduce \#(if (not\= (count (\:sequence %2)) (* 3 261)) \\n           (str % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 261) \\").\\\\n\\")\\n           %1) \\"\\" (rest myerrmap))" "(reduce \#(if (not\= (count (\:sequence %2)) (* 3 261)) \\n           (println % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 261) \\").\\\\n\\")) \\"\\" (rest myerrmap))" "(reduce \#(if (not\= (count (\:sequence %2)) (* 3 261)) \\n           (println % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 260) \\").\\\\n\\")) \\"\\" (rest myerrmap))" "(with-out-str (reduce \#(if (not\= (count (\:sequence %2)) (* 3 261)) \\n                         (println % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 260) \\").\\\\n\\")) \\"\\" (rest myerrmap)))" "(reduce \#(if (not\= (count (\:sequence %2)) (* 3 260)) \\n           (println % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 261) \\").\\\\n\\")) \\"\\" (rest myerrmap))" "(reduce \#(if (not\= (count (\:sequence %2)) (* 3 260)) \\n           (println % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 261) \\").\\\\n\\")\\n           \\"\\") \\"\\" (rest myerrmap))" "(reduce \#(if (not\= (count (\:sequence %2)) (* 3 260)) \\n           (println % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 261) \\").\\\\n\\")\\n           (str \\"\\")) \\"\\" (rest myerrmap))" "(reduce \#(if (not\= (count (\:sequence %2)) (* 3 260)) \\n           (println % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 261) \\").\\")\\n           (str \\"\\")) \\"\\" (rest myerrmap))" "(with-out-str (reduce \#(if (not\= (count (\:sequence %2)) (* 3 260)) \\n                         (println % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 261) \\").\\")\\n                         (str \\"\\")) \\"\\" (rest myerrmap)))" "(reduce \#(if (not\= (count (\:sequence %2)) (* 3 261)) \\n           (str % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 261) \\").\\\\n\\")\\n           %1) \\"\\" (rest myerrmap))" "(reduce \#(if (not\= (count (\:sequence %2)) (* 3 260)) \\n           (str % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 261) \\").\\\\n\\")\\n           %1) \\"\\" (rest myerrmap))" "(defn check-length\\n [errmap len]\\n (reduce \#(if (not\= (count (\:sequence %2)) (* 3 len)) \\n            (str % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 len) \\").\\\\n\\")\\n            %1) \\"\\" (rest errmap)))" "(check-length myerrmap 261)" "(check-length myerrmap 260)" "(v/check-max-fastas {\:file {\:tempfile \\"/Users/stu/Desktop/cmv_kin_invalid_reference.fasta\\"}} \:file \:file-errors)" "(check-length myerrmap 260)" "(def myerr (check-length myerrmap 260))" "(clojure.string/split-lines myerr)" "(merge (clojure.string/split-lines myerr) (clojure.string/split-lines myerr))" "(clojure.string/split-lines \\"\\")" "(vector (clojure.string/split-lines myerr) (clojure.string/split-lines myerr))" "(vec (clojure.string/split-lines myerr) (clojure.string/split-lines myerr))" "(apply vector (clojure.string/split-lines myerr) (clojure.string/split-lines myerr))" "(clojure.string/split-lines myerr)" "(def myvecerr (clojure.string/split-lines myerr))" "(cons myvecerr myvecerr)" "(conj myvecerr myvecerr)" "(into [] myvecerr myvecerr)" "(into myvecerr myvecerr)" "(defn check-length\\n [errmap len]\\n (clojure.string/split-lines (reduce \#(if (not\= (count (\:sequence %2)) (* 3 len)) \\n             (str % \\"Sequence with header \\" (\:header %2) \\" is the wrong length (\\" (count (\:sequence %2)) \\" bases, should be \\" (* 3 len) \\").\\\\n\\")\\n             %1) \\"\\" (rest errmap))))" "(empty? \\"\\")" "(empty? [\\"\\"])" "(merge \\"\\" \\"\\")" "(str \\"\\" \\"\\")" "(empty? (str \\"\\" \\"\\"))" "(defn check-headers\\n  [errmap]\\n  (reduce \#(if (and (\:participant_id %2) (\:dataset_id %2))\\n             \\"\\"\\n             (str % \\"Sequence header \\" (\:header %2) \\" is in the wrong format.\\"))))" "(defn check-headers\\n  [errmap]\\n  (reduce \#(if (and (\:participant_id %2) (\:dataset_id %2))\\n             \\"\\"\\n             (str % \\"Sequence header \\" (\:header %2) \\" is in the wrong format.\\"))) \\"\\" (rest errmap))" "(v/file-to-fasta {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors)" "(map fasta-to-res (v/file-to-fasta {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors))" "(defn parse-header\\n  [fastamap] \\n  (let [part-dataset (-> (s/split (\:header fastamap) \#\\"\\\\.\\") (map parse-int))]\\n    (merge fastamap\\n           {\:participant_id (first part-dataset) \:dataset_id (second part-dataset)})))" "(defn parse-header\\n  [fastamap] \\n  (let [part-dataset (-> (clojure.string/split (\:header fastamap) \#\\"\\\\.\\") (map parse-int))]\\n    (merge fastamap\\n           {\:participant_id (first part-dataset) \:dataset_id (second part-dataset)})))" "(defn parse-header\\n  [fastamap] \\n  (let [part-dataset (-> (clojure.string/split (\:header fastamap) \#\\"\\\\.\\") (map v/parse-int))]\\n    (merge fastamap\\n           {\:participant_id (first part-dataset) \:dataset_id (second part-dataset)})))" "(defn fasta-to-res\\n  [errmap]\\n    (cons (first errmap) (map parse-header (rest errmap))))" "(map fasta-to-res (v/file-to-fasta {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors))" "(defn parse-header\\n  [fastamap] \\n  (let [part-dataset (-> (clojure.string/split (\:header fastamap) \#\\"\\\\.\\") (map v/parse-int))]\\n    (if (\= (count part-dataset) 2)\\n      (merge fastamap\\n             {\:participant_id (first part-dataset) \:dataset_id (second part-dataset)})\\n      fastamap)))" "(map fasta-to-res (v/file-to-fasta {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors))" "(fasta-to-res (v/file-to-fasta {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors))" "(defn parse-header\\n  [fastamap] \\n  (let [part-dataset (->> (clojure.string/split (\:header fastamap) \#\\"\\\\.\\") (map v/parse-int))]\\n    (if (\= (count part-dataset) 2)\\n      (merge fastamap\\n             {\:participant_id (first part-dataset) \:dataset_id (second part-dataset)})\\n      fastamap)))" "(fasta-to-res (v/file-to-fasta {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors))" "(def myres (fasta-to-res (v/file-to-fasta {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors)))" "(defn check-headers\\n  [errmap]\\n  (reduce \#(if (and (\:participant_id %2) (\:dataset_id %2))\\n             \\"\\"\\n             (str % \\"Sequence header \\" (\:header %2) \\" is in the wrong format.\\"))) \\"\\" (rest errmap))" "(check-headers myres)" "(defn check-headers\\n  [errmap]\\n  (reduce \#(if (and (\:participant_id %2) (\:dataset_id %2))\\n             \\"\\"\\n             (str % \\"Sequence header \\" (\:header %2) \\" is in the wrong format.\\")) \\"\\" (rest errmap)))" "(check-headers myres)" "myres" "(defn check-headers\\n  [errmap]\\n  (reduce \#(if (and (integer? (\:participant_id %2)) (integer? (\:dataset_id %2)))\\n             \\"\\"\\n             (str % \\"Sequence header \\" (\:header %2) \\" is in the wrong format.\\")) \\"\\" (rest errmap)))" "(check-headers myres)" "(defn check-headers\\n  [errmap]\\n  (reduce \#(if (and (integer? (\:participant_id %2)) (integer? (\:dataset_id %2)))\\n             \\"\\"\\n             (str % \\"Sequence header \\" (\:header %2) \\" is in the wrong format./n\\")) \\"\\" (rest errmap)))" "(def myres ((comp fasta-to-res v/file-to-fasta) {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors))" "myres" "(update-in [1 \:errorname] str \\"dkfjdk\\")" "(first myerr)" "(update-in myerr [1 \:errorname] str \\"dkfjdk\\")" "(def newmap [{\:errorname \\"blah\\"}])" "(update-in newmap [1 \:errorname] str \\"blargl\\")" "(update-in newmap [0 \:errorname] str \\"blargl\\")" "(update-in [{}] [0 \:errorname] str \\"blargl\\")" "(first myerr)" "myerr" "(concat myvecerr myvecerr)" "(concat nil myvecerr)" "(update-in {} [\:errorname] concat myvecerr)" "(update-in [{}] [0 \:errorname] concat myvecerr)" "(def myres ((comp fasta-to-res file-to-fasta) {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors))" "myres" "(check-length myerr 261)" "(check-length myres 261)" "(class (check-length myres 261))" "(check-headers myres)" "(defn get-errs-results\\n  [params fieldname errorname len]\\n  (let [errmap ((comp fasta-to-res file-to-fasta) params fieldname errorname)\\n        lenerrs (check-length errmap len)\\n        headerrs (check-headers errmap)]\\n    (if (empty? (str lenerrs headerrs))\\n      errmap\\n        (update-in errmap [0 errorname] concat (s/split-lines (str lenerrs headerrs))))))" "(get-errs-results {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors)" "(get-errs-results {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:results-upload \:results-errors 261)" "(def headerrs (check-headers myres))" "(def lenerrs (check-length myres 261))" "(str headerrs lenerrs)" "(s/split-lines (str headerrs lenerrs))" "(update-in myres [0 \:error-name] concat (s/split-lines (str headerrs lenerrs)))" "(class? (s/split-lines (str headerrs lenerrs)))" "(class (s/split-lines (str headerrs lenerrs)))" "(update-in {} [\:error-name] concat (s/split-lines (str headerrs lenerrs)))" "(update-in [{}] [0 \:error-name] concat (s/split-lines (str headerrs lenerrs)))" "(first myres)" "(update-in [{} {\:another \\"map\\"}] [0 \:error-name] concat (s/split-lines (str headerrs lenerrs)))" "(class myres)" "(update-in (vec myres) [0 \:error-name] concat (s/split-lines (str headerrs lenerrs)))" "(get-errs-consensus {\:results-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:consensus-upload \:consensus-errors 261)" "(get-errs-consensus {\:results-upload {\:tempfile \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\" \:size 9}} \:consensus-upload \:consensus-errors 261)" "(file-to-fasta {\:results-upload {\:tempfile \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\" \:size 9}} \:consensus-upload \:consensus-errors)" "(get-errs-consensus {\:consensus-upload {\:tempfile \\"/Users/stu/Desktop/CMVDR15_KINSample5.fasta\\" \:size 9}} \:consensus-upload \:consensus-errors 261)" "(get-errs-consensus {\:consensus-upload {\:tempfile \\"/Users/stu/Desktop/cmv_kin_reference.fasta\\" \:size 9}} \:consensus-upload \:consensus-errors 261)" "(def myparams {\:__anti-forgery-token \\"JWY5ofrAPrXJo7a7Bh7S4Xx3PaOqbM+3yT3TTOrhfwMPPPfg4bK0yIQ2oD6WKlMfmnfp5N5LLcoMMsp8\\", \:reference-id \\"17\\", \:alignment-name \\"drabble\\", \:results-upload {\:filename \\"CMVDR15_KINSample5.fasta\\", \:content-type \\"application/octet-stream\\", \:size 3193}, \:consensus-upload {\:filename \\"cmv_kin_reference.fasta\\", \:content-type \\"application/octet-stream\\", , \:size 833}})" "{\:reference_id (\:reference-id myparams) \:name (\:alignment-name myparams) \:results_filename (get-in myparams [\:results-upload \:filename])}" "(local/do-local-insert\! \:alignment {\:reference_id (\:reference-id myparams) \:name (\:alignment-name myparams) \:results_filename (get-in myparams [\:results-upload \:filename])})" "(use 'rockford.db.local)" "(do-local-insert\! \:alignment {\:reference_id (\:reference-id myparams) \:name (\:alignment-name myparams) \:results_filename (get-in myparams [\:results-upload \:filename])})" "(-> (do-local-insert\! \:alignment {\:reference_id (\:reference-id myparams) \:name (\:alignment-name myparams) \:results_filename (get-in myparams [\:results-upload \:filename])}) first \:generated_key)" "(def mycons {\:header \\"Wildtype (Kinase UL97)\\", \:sequence \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTCACGGTCTGGATGTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGCACGGGCGTGCACCGCGGTCTGCTCACGGCCACGGGCTGCTGTCTGCTGCACAACGTCACGGTACATCGACGTTTCCACACAGACATGTTTCATCACGACCAGTGGAAGCTGGCGTGCATCGACAGCTACCGACGTGCCTTTTGCACGTTGGCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGTACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCACCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGCATGTCGGAGCTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTTGGAGAACGGTAAGCTCACGCACTGCTCCGACGCCTGTCTGCTCATT\\"})" "(assoc mycons \:filename (get-in params [\:consensus-upload \:filename]))" "(assoc mycons \:filename (get-in myparams [\:consensus-upload \:filename]))" "(def consensus (assoc mycons \:filename (get-in myparams [\:consensus-upload \:filename])))" "(do-local-insert\! \:consensus (assoc consensus \:alignment_id 2))" "(def results ({\:header \\"89.387348\\", \:sequence \\"------------------------------------------GTGCTCACGGTCTGGATGTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGCACGGGTGTGCACCGCGGTCTGCTCACGGCCACGGGCTGCTGTCTGCTGCACAACGTCACGGTACATCGACGTTTCCACACAGACATGTTTCATCACGACCAGTGGAAGCTGGCGTGCATCGACAGCTACCGGCGTGCCTTTTGCACGTTGGCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGCACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCAGCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGCATGTCGGAGCTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTCGGAGAACGGCAAGCTCACGCACTGCTCCGAGGCCTGTCTGCTCATT\\", \:participant_id 89, \:dataset_id 387348} {\:header \\"140.387873\\", \:sequence \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTGACGGTCTGGATGTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGCACGGGTGTGCACCGCGGTCTGCTCACGGCCACGGGCTGCTGTCTGCTGCACAACGTCACGGTACATCGACGTTTCCACACAGACATGTTTCATCACGACCAGTGGAAGCTGGCGTGCATCGACAGCTACCGGCGTGCCTTTTGCACGTTGGCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGCACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCAGCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGCATGTCGGAGCTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTCGGAGAACGGCAAGCTCACGCACTGCTCCGAGGCCTGTCTGCTCATT\\", \:participant_id 140, \:dataset_id 387873} {\:header \\"1532.3383908\\", \:sequence \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTGACGGTCTGGATGTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGCACGGGTGTGCACCGCGGTCTGCTCACGGCCACGGGCTGCTGTCTGCTGCACAACGTCACGGTACATCGACGTTTCCACACAGACATGTTTCATCACGACCAGTGGAAGCTGGCGTGCATCGACAGCTACCGGCGTGCCTTTTGCACGTTGGCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGCACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCAGCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGCATGTCGGAGCTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTCGGAGAACGGCAAGCTCACGCACTGCTCCGAGGCCTGTCTGCTCATT\\", \:participant_id 1532, \:dataset_id 3383908} {\:header \\"1720.38738\\", \:sequence \\"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------GCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGCACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCASCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTYKGAGAACGGCAAGCTCACGCACTGCTCCGAGGCCTGTCTGCTCATT\\", \:participant_id 1720, \:dataset_id 38738}))" "(def results '({\:header \\"89.387348\\", \:sequence \\"------------------------------------------GTGCTCACGGTCTGGATGTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGCACGGGTGTGCACCGCGGTCTGCTCACGGCCACGGGCTGCTGTCTGCTGCACAACGTCACGGTACATCGACGTTTCCACACAGACATGTTTCATCACGACCAGTGGAAGCTGGCGTGCATCGACAGCTACCGGCGTGCCTTTTGCACGTTGGCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGCACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCAGCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGCATGTCGGAGCTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTCGGAGAACGGCAAGCTCACGCACTGCTCCGAGGCCTGTCTGCTCATT\\", \:participant_id 89, \:dataset_id 387348} {\:header \\"140.387873\\", \:sequence \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTGACGGTCTGGATGTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGCACGGGTGTGCACCGCGGTCTGCTCACGGCCACGGGCTGCTGTCTGCTGCACAACGTCACGGTACATCGACGTTTCCACACAGACATGTTTCATCACGACCAGTGGAAGCTGGCGTGCATCGACAGCTACCGGCGTGCCTTTTGCACGTTGGCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGCACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCAGCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGCATGTCGGAGCTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTCGGAGAACGGCAAGCTCACGCACTGCTCCGAGGCCTGTCTGCTCATT\\", \:participant_id 140, \:dataset_id 387873} {\:header \\"1532.3383908\\", \:sequence \\"CGCTATCGCGTGGTCAAGGTGGCGCGTAAGCACAGCGAGACGGTGCTGACGGTCTGGATGTCGGGCCTGATCCGCACGCGCGCCGCTGGCGAGCAACAGCAGCCGCCGTCGCTGGTGGGCACGGGTGTGCACCGCGGTCTGCTCACGGCCACGGGCTGCTGTCTGCTGCACAACGTCACGGTACATCGACGTTTCCACACAGACATGTTTCATCACGACCAGTGGAAGCTGGCGTGCATCGACAGCTACCGGCGTGCCTTTTGCACGTTGGCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGCACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCAGCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATTGCATGTCGGAGCTGTCGGCGCTGGGTAACGTGCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTCGGAGAACGGCAAGCTCACGCACTGCTCCGAGGCCTGTCTGCTCATT\\", \:participant_id 1532, \:dataset_id 3383908} {\:header \\"1720.38738\\", \:sequence \\"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------GCCGACGCTATCAAATTTCTCAATCACCAGTGTCGTGTATGCCACTTTGACATTACACCCATGAACGTGCTCATCGACGTGAACCCGCACAACCCCAGCGAGATCGTGCGCGCCGCGCTGTGCGATTACAGCCTCAGCGAGCCCTATCCGGATTACAACGAGCGCTGTGTGGCCGTCTTTCAGGAGACGGGCACGGCGCGCCGCATCCCCAACTGCTCGCACCGTCTGCGCGAATGTTACCASCCTGCTTTCCGACCCATGCCGCTGCAGAAGCTGCTCATCTGCGACCCGCACGCGCGTTTCCCCGTAGCCGGCCTACGGCGTTATNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCTGGGCTTTTGCCTCATGCGGCTGTTGGACCGGCGCGGTCTGGACGAGGTGCGCATGGGCACGGAGGCGTTGCTCTTTAAGCACGCCGGCGCGGCCTGCCGCGCGTYKGAGAACGGCAAGCTCACGCACTGCTCCGAGGCCTGTCTGCTCATT\\", \:participant_id 1720, \:dataset_id 38738}))" "(map \#(-> % (assoc \:alignment_id 2) (dissoc \:header)) results)" "(do-local-insert-multi\! \:alignment_results (map \#(-> % (assoc \:alignment_id 2) (dissoc \:header)) results))" "(defn do-alignment-inserts\!\\n  [alignment-id consensus results]\\n  (do\\n    (do-local-insert\! \:consensus (assoc consensus \:alignment_id alignment-id))\\n    (do-local-insert-multi\! \:alignment_results (map \#(-> % (assoc \:alignment_id alignment-id) (dissoc \:header)) results))))" "(do-local-execute\! [\\"UPDATE alignment SET complete \= 1 WHERE id \= ?\\" 2])" "(defn do-alignment-inserts\!\\n  [alignment-id consensus results]\\n  (do\\n    (do-local-insert\! \:consensus (assoc consensus \:alignment_id alignment-id))\\n    (do-local-insert-multi\! \:alignment_results (map \#(-> % (assoc \:alignment_id alignment-id) (dissoc \:header)) results))\\n    (do-local-execute\! [\\"UPDATE alignment SET complete \= 1 WHERE id \= ?\\" alignment-id])))" "(do-local-query [\\"SELECT a.id, a.alignment_name, a.results_filename, r.reference_name, COUNT(*) 'number_results' FROM alignment a INNER JOIN reference r ON a.reference_id \= r.id INNER JOIN alignment_results ar ON a.id \= ar.alignment_id GROUP BY a.id\\"])" "(->> (do-local-query [\\"SELECT a.id, a.alignment_name, a.results_filename, r.reference_name, COUNT(*) 'number_results' FROM alignment a INNER JOIN reference r ON a.reference_id \= r.id INNER JOIN alignment_results ar ON a.id \= ar.alignment_id GROUP BY a.id\\"]\\n    (filter \#(\= 3 (\:id %)))))" "(->> (do-local-query [\\"SELECT a.id, a.alignment_name, a.results_filename, r.reference_name, COUNT(*) 'number_results' FROM alignment a INNER JOIN reference r ON a.reference_id \= r.id INNER JOIN alignment_results ar ON a.id \= ar.alignment_id GROUP BY a.id\\"])\\n    (filter \#(\= 3 (\:id %))))" "(do-local-query [\\"SELECT * FROM alignment_results WHERE alignment_id \= ?\\" 2])"]
eclipse.preferences.version=1
